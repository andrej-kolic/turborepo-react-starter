name: 'Build Project'
description: 'Setup Node.js environment, install dependencies, and run build pipeline with optional checks'

inputs:
  node-version:
    description: 'Node.js version to use'
    required: false
    default: '20'

  pnpm-version:
    description: 'pnpm version to use'
    required: false
    default: '10'

  check-dependencies:
    description: 'Run dependency check (pnpm depchk)'
    required: false
    default: 'true'

  check-format:
    description: 'Run format check (pnpm check:format)'
    required: false
    default: 'true'

  run-lint:
    description: 'Run linting (pnpm lint)'
    required: false
    default: 'true'

  run-tests:
    description: 'Run tests (pnpm test)'
    required: false
    default: 'true'

  build-filter:
    description: 'Build filter for specific packages/apps (e.g., app-vite)'
    required: true
    # TODO: figure out how to set default bundler
    # default: ''

runs:
  using: 'composite'

  steps:
    - name: Debug
      shell: bash
      run: |
        if ! [ -n "${{ inputs.build-filter }}" ]; then
          echo "No build filter provided."
        else
          echo "Build filter provided: ${{ inputs.build-filter }}"
        fi

    - name: Print environment
      shell: bash
      run: |
        echo " "
        echo " "
        echo "Print environment"
        echo "──────────────────────────────────────"
        echo " "
        echo "Node.js version: ${{ inputs.node-version }}"
        echo "pnpm version: ${{ inputs.pnpm-version }}"
        echo "Check dependencies: ${{ inputs.check-dependencies }}"
        echo "Check format: ${{ inputs.check-format }}"
        echo "Run lint: ${{ inputs.run-lint }}"
        echo "Run tests: ${{ inputs.run-tests }}"
        echo "Build filter: ${{ inputs.build-filter }}"
        echo " "

    - shell: bash
      run: |
        echo " "
        echo " "
        echo "Setup pnpm"
        echo "──────────────────────────────────────"
        echo " "
    - name: Setup pnpm
      uses: pnpm/action-setup@v3
      with:
        version: ${{ inputs.pnpm-version }}

    - shell: bash
      run: |
        echo " "
        echo " "
        echo "Setup Node.js"
        echo "──────────────────────────────────────"
        echo " "
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }}
        cache: 'pnpm'

    - name: Install dependencies
      shell: bash
      run: |
        echo " "
        echo " "
        echo "Install dependencies"
        echo "──────────────────────────────────────"
        echo " "
        pnpm install

    - name: Check dependencies
      if: inputs.check-dependencies == 'true'
      shell: bash
      run: |
        echo " "
        echo " "
        echo "Check dependencies"
        echo "──────────────────────────────────────"
        echo " "
        pnpm depchk

    - name: Check format
      if: inputs.check-format == 'true'
      shell: bash
      run: |
        echo " "
        echo " "
        echo "Check format"
        echo "──────────────────────────────────────"
        echo " "
        pnpm check:format

    - name: Build
      shell: bash
      run: |
        echo " "
        echo " "
        echo "Build (filter: ${{ inputs.build-filter }})"
        echo "──────────────────────────────────────"
        echo " "
        if [ -n "${{ inputs.build-filter }}" ]; then
          pnpm build --filter ${{ inputs.build-filter }}
        else
          pnpm build
        fi

    - name: Lint
      if: inputs.run-lint == 'true'
      shell: bash
      run: |
        echo " "
        echo " "
        echo "Lint"
        echo "──────────────────────────────────────"
        echo " "
        pnpm lint

    - name: Test
      if: inputs.run-tests == 'true'
      shell: bash
      run: |
        echo " "
        echo " "
        echo "Test"
        echo "──────────────────────────────────────"
        echo " "
        pnpm test
